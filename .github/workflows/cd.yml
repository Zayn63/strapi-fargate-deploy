name: Deploy Strapi to ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-north-1
  ECR_REPOSITORY: zayn-repo
  ECS_CLUSTER: ecs
  ECS_SERVICE: strapi
  TASK_FAMILY: strapi

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image to ECR
        run: |
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest"
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
        working-directory: ./ # Or ./strapi if that's where Dockerfile is

      - name: Register new ECS task definition revision
        id: register-task-def
        run: |
          TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_FAMILY)
          echo "$TASK_DEF" > task-def.json

          NEW_TASK_DEF=$(cat task-def.json | jq \
            --arg IMAGE_URI "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest" \
            '.taskDefinition | {
              family: .family,
              networkMode: .networkMode,
              containerDefinitions: (.containerDefinitions | map(.image = $IMAGE_URI)),
              requiresCompatibilities: .requiresCompatibilities,
              cpu: .cpu,
              memory: .memory,
              executionRoleArn: .executionRoleArn,
              taskRoleArn: .taskRoleArn
            }')

          echo "$NEW_TASK_DEF" > new-task-def.json
          aws ecs register-task-definition --cli-input-json file://new-task-def.json

      - name: Update ECS service to use new task definition
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment
